/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FinancialInstitutionService } from "../financialInstitution.service";
import { FinancialInstitutionCreateInput } from "./FinancialInstitutionCreateInput";
import { FinancialInstitution } from "./FinancialInstitution";
import { FinancialInstitutionFindManyArgs } from "./FinancialInstitutionFindManyArgs";
import { FinancialInstitutionWhereUniqueInput } from "./FinancialInstitutionWhereUniqueInput";
import { FinancialInstitutionUpdateInput } from "./FinancialInstitutionUpdateInput";

export class FinancialInstitutionControllerBase {
  constructor(protected readonly service: FinancialInstitutionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FinancialInstitution })
  async createFinancialInstitution(
    @common.Body() data: FinancialInstitutionCreateInput
  ): Promise<FinancialInstitution> {
    return await this.service.createFinancialInstitution({
      data: data,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FinancialInstitution] })
  @ApiNestedQuery(FinancialInstitutionFindManyArgs)
  async financialInstitutions(
    @common.Req() request: Request
  ): Promise<FinancialInstitution[]> {
    const args = plainToClass(FinancialInstitutionFindManyArgs, request.query);
    return this.service.financialInstitutions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstitution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async financialInstitution(
    @common.Param() params: FinancialInstitutionWhereUniqueInput
  ): Promise<FinancialInstitution | null> {
    const result = await this.service.financialInstitution({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstitution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFinancialInstitution(
    @common.Param() params: FinancialInstitutionWhereUniqueInput,
    @common.Body() data: FinancialInstitutionUpdateInput
  ): Promise<FinancialInstitution | null> {
    try {
      return await this.service.updateFinancialInstitution({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FinancialInstitution })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFinancialInstitution(
    @common.Param() params: FinancialInstitutionWhereUniqueInput
  ): Promise<FinancialInstitution | null> {
    try {
      return await this.service.deleteFinancialInstitution({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
