/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialInstitution } from "./FinancialInstitution";
import { FinancialInstitutionCountArgs } from "./FinancialInstitutionCountArgs";
import { FinancialInstitutionFindManyArgs } from "./FinancialInstitutionFindManyArgs";
import { FinancialInstitutionFindUniqueArgs } from "./FinancialInstitutionFindUniqueArgs";
import { CreateFinancialInstitutionArgs } from "./CreateFinancialInstitutionArgs";
import { UpdateFinancialInstitutionArgs } from "./UpdateFinancialInstitutionArgs";
import { DeleteFinancialInstitutionArgs } from "./DeleteFinancialInstitutionArgs";
import { FinancialInstitutionService } from "../financialInstitution.service";
@graphql.Resolver(() => FinancialInstitution)
export class FinancialInstitutionResolverBase {
  constructor(protected readonly service: FinancialInstitutionService) {}

  async _financialInstitutionsMeta(
    @graphql.Args() args: FinancialInstitutionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialInstitution])
  async financialInstitutions(
    @graphql.Args() args: FinancialInstitutionFindManyArgs
  ): Promise<FinancialInstitution[]> {
    return this.service.financialInstitutions(args);
  }

  @graphql.Query(() => FinancialInstitution, { nullable: true })
  async financialInstitution(
    @graphql.Args() args: FinancialInstitutionFindUniqueArgs
  ): Promise<FinancialInstitution | null> {
    const result = await this.service.financialInstitution(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialInstitution)
  async createFinancialInstitution(
    @graphql.Args() args: CreateFinancialInstitutionArgs
  ): Promise<FinancialInstitution> {
    return await this.service.createFinancialInstitution({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FinancialInstitution)
  async updateFinancialInstitution(
    @graphql.Args() args: UpdateFinancialInstitutionArgs
  ): Promise<FinancialInstitution | null> {
    try {
      return await this.service.updateFinancialInstitution({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialInstitution)
  async deleteFinancialInstitution(
    @graphql.Args() args: DeleteFinancialInstitutionArgs
  ): Promise<FinancialInstitution | null> {
    try {
      return await this.service.deleteFinancialInstitution(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
