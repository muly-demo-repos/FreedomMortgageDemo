/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FinancialRecord as PrismaFinancialRecord,
  Borrower as PrismaBorrower,
} from "@prisma/client";

export class FinancialRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FinancialRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.financialRecord.count(args);
  }

  async financialRecords<T extends Prisma.FinancialRecordFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialRecordFindManyArgs>
  ): Promise<PrismaFinancialRecord[]> {
    return this.prisma.financialRecord.findMany<Prisma.FinancialRecordFindManyArgs>(
      args
    );
  }
  async financialRecord<T extends Prisma.FinancialRecordFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialRecordFindUniqueArgs>
  ): Promise<PrismaFinancialRecord | null> {
    return this.prisma.financialRecord.findUnique(args);
  }
  async createFinancialRecord<T extends Prisma.FinancialRecordCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialRecordCreateArgs>
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.create<T>(args);
  }
  async updateFinancialRecord<T extends Prisma.FinancialRecordUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialRecordUpdateArgs>
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.update<T>(args);
  }
  async deleteFinancialRecord<T extends Prisma.FinancialRecordDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FinancialRecordDeleteArgs>
  ): Promise<PrismaFinancialRecord> {
    return this.prisma.financialRecord.delete(args);
  }

  async getBorrower(parentId: string): Promise<PrismaBorrower | null> {
    return this.prisma.financialRecord
      .findUnique({
        where: { id: parentId },
      })
      .borrower();
  }
}
