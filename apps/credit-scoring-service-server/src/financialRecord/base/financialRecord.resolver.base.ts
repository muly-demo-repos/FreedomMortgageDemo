/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FinancialRecord } from "./FinancialRecord";
import { FinancialRecordCountArgs } from "./FinancialRecordCountArgs";
import { FinancialRecordFindManyArgs } from "./FinancialRecordFindManyArgs";
import { FinancialRecordFindUniqueArgs } from "./FinancialRecordFindUniqueArgs";
import { CreateFinancialRecordArgs } from "./CreateFinancialRecordArgs";
import { UpdateFinancialRecordArgs } from "./UpdateFinancialRecordArgs";
import { DeleteFinancialRecordArgs } from "./DeleteFinancialRecordArgs";
import { Borrower } from "../../borrower/base/Borrower";
import { FinancialRecordService } from "../financialRecord.service";
@graphql.Resolver(() => FinancialRecord)
export class FinancialRecordResolverBase {
  constructor(protected readonly service: FinancialRecordService) {}

  async _financialRecordsMeta(
    @graphql.Args() args: FinancialRecordCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FinancialRecord])
  async financialRecords(
    @graphql.Args() args: FinancialRecordFindManyArgs
  ): Promise<FinancialRecord[]> {
    return this.service.financialRecords(args);
  }

  @graphql.Query(() => FinancialRecord, { nullable: true })
  async financialRecord(
    @graphql.Args() args: FinancialRecordFindUniqueArgs
  ): Promise<FinancialRecord | null> {
    const result = await this.service.financialRecord(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FinancialRecord)
  async createFinancialRecord(
    @graphql.Args() args: CreateFinancialRecordArgs
  ): Promise<FinancialRecord> {
    return await this.service.createFinancialRecord({
      ...args,
      data: {
        ...args.data,

        borrower: args.data.borrower
          ? {
              connect: args.data.borrower,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => FinancialRecord)
  async updateFinancialRecord(
    @graphql.Args() args: UpdateFinancialRecordArgs
  ): Promise<FinancialRecord | null> {
    try {
      return await this.service.updateFinancialRecord({
        ...args,
        data: {
          ...args.data,

          borrower: args.data.borrower
            ? {
                connect: args.data.borrower,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialRecord)
  async deleteFinancialRecord(
    @graphql.Args() args: DeleteFinancialRecordArgs
  ): Promise<FinancialRecord | null> {
    try {
      return await this.service.deleteFinancialRecord(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Borrower, {
    nullable: true,
    name: "borrower",
  })
  async getBorrower(
    @graphql.Parent() parent: FinancialRecord
  ): Promise<Borrower | null> {
    const result = await this.service.getBorrower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
