/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScoreReport } from "./ScoreReport";
import { ScoreReportCountArgs } from "./ScoreReportCountArgs";
import { ScoreReportFindManyArgs } from "./ScoreReportFindManyArgs";
import { ScoreReportFindUniqueArgs } from "./ScoreReportFindUniqueArgs";
import { CreateScoreReportArgs } from "./CreateScoreReportArgs";
import { UpdateScoreReportArgs } from "./UpdateScoreReportArgs";
import { DeleteScoreReportArgs } from "./DeleteScoreReportArgs";
import { Borrower } from "../../borrower/base/Borrower";
import { ScoreReportService } from "../scoreReport.service";
@graphql.Resolver(() => ScoreReport)
export class ScoreReportResolverBase {
  constructor(protected readonly service: ScoreReportService) {}

  async _scoreReportsMeta(
    @graphql.Args() args: ScoreReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScoreReport])
  async scoreReports(
    @graphql.Args() args: ScoreReportFindManyArgs
  ): Promise<ScoreReport[]> {
    return this.service.scoreReports(args);
  }

  @graphql.Query(() => ScoreReport, { nullable: true })
  async scoreReport(
    @graphql.Args() args: ScoreReportFindUniqueArgs
  ): Promise<ScoreReport | null> {
    const result = await this.service.scoreReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScoreReport)
  async createScoreReport(
    @graphql.Args() args: CreateScoreReportArgs
  ): Promise<ScoreReport> {
    return await this.service.createScoreReport({
      ...args,
      data: {
        ...args.data,

        borrower: args.data.borrower
          ? {
              connect: args.data.borrower,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => ScoreReport)
  async updateScoreReport(
    @graphql.Args() args: UpdateScoreReportArgs
  ): Promise<ScoreReport | null> {
    try {
      return await this.service.updateScoreReport({
        ...args,
        data: {
          ...args.data,

          borrower: args.data.borrower
            ? {
                connect: args.data.borrower,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScoreReport)
  async deleteScoreReport(
    @graphql.Args() args: DeleteScoreReportArgs
  ): Promise<ScoreReport | null> {
    try {
      return await this.service.deleteScoreReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Borrower, {
    nullable: true,
    name: "borrower",
  })
  async getBorrower(
    @graphql.Parent() parent: ScoreReport
  ): Promise<Borrower | null> {
    const result = await this.service.getBorrower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
