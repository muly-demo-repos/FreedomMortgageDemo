/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ScoreReport as PrismaScoreReport,
  Borrower as PrismaBorrower,
} from "@prisma/client";

export class ScoreReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScoreReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scoreReport.count(args);
  }

  async scoreReports<T extends Prisma.ScoreReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreReportFindManyArgs>
  ): Promise<PrismaScoreReport[]> {
    return this.prisma.scoreReport.findMany<Prisma.ScoreReportFindManyArgs>(
      args
    );
  }
  async scoreReport<T extends Prisma.ScoreReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreReportFindUniqueArgs>
  ): Promise<PrismaScoreReport | null> {
    return this.prisma.scoreReport.findUnique(args);
  }
  async createScoreReport<T extends Prisma.ScoreReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreReportCreateArgs>
  ): Promise<PrismaScoreReport> {
    return this.prisma.scoreReport.create<T>(args);
  }
  async updateScoreReport<T extends Prisma.ScoreReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreReportUpdateArgs>
  ): Promise<PrismaScoreReport> {
    return this.prisma.scoreReport.update<T>(args);
  }
  async deleteScoreReport<T extends Prisma.ScoreReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScoreReportDeleteArgs>
  ): Promise<PrismaScoreReport> {
    return this.prisma.scoreReport.delete(args);
  }

  async getBorrower(parentId: string): Promise<PrismaBorrower | null> {
    return this.prisma.scoreReport
      .findUnique({
        where: { id: parentId },
      })
      .borrower();
  }
}
