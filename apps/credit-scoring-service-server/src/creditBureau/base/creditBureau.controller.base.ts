/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditBureauService } from "../creditBureau.service";
import { CreditBureauCreateInput } from "./CreditBureauCreateInput";
import { CreditBureau } from "./CreditBureau";
import { CreditBureauFindManyArgs } from "./CreditBureauFindManyArgs";
import { CreditBureauWhereUniqueInput } from "./CreditBureauWhereUniqueInput";
import { CreditBureauUpdateInput } from "./CreditBureauUpdateInput";
import { CreditReportFindManyArgs } from "../../creditReport/base/CreditReportFindManyArgs";
import { CreditReport } from "../../creditReport/base/CreditReport";
import { CreditReportWhereUniqueInput } from "../../creditReport/base/CreditReportWhereUniqueInput";

export class CreditBureauControllerBase {
  constructor(protected readonly service: CreditBureauService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditBureau })
  async createCreditBureau(
    @common.Body() data: CreditBureauCreateInput
  ): Promise<CreditBureau> {
    return await this.service.createCreditBureau({
      data: data,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditBureau] })
  @ApiNestedQuery(CreditBureauFindManyArgs)
  async creditBureaus(@common.Req() request: Request): Promise<CreditBureau[]> {
    const args = plainToClass(CreditBureauFindManyArgs, request.query);
    return this.service.creditBureaus({
      ...args,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditBureau })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditBureau(
    @common.Param() params: CreditBureauWhereUniqueInput
  ): Promise<CreditBureau | null> {
    const result = await this.service.creditBureau({
      where: params,
      select: {
        address: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditBureau })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditBureau(
    @common.Param() params: CreditBureauWhereUniqueInput,
    @common.Body() data: CreditBureauUpdateInput
  ): Promise<CreditBureau | null> {
    try {
      return await this.service.updateCreditBureau({
        where: params,
        data: data,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditBureau })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditBureau(
    @common.Param() params: CreditBureauWhereUniqueInput
  ): Promise<CreditBureau | null> {
    try {
      return await this.service.deleteCreditBureau({
        where: params,
        select: {
          address: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/creditReports")
  @ApiNestedQuery(CreditReportFindManyArgs)
  async findCreditReports(
    @common.Req() request: Request,
    @common.Param() params: CreditBureauWhereUniqueInput
  ): Promise<CreditReport[]> {
    const query = plainToClass(CreditReportFindManyArgs, request.query);
    const results = await this.service.findCreditReports(params.id, {
      ...query,
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        creditBureau: {
          select: {
            id: true,
          },
        },

        details: true,
        id: true,
        reportDate: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creditReports")
  async connectCreditReports(
    @common.Param() params: CreditBureauWhereUniqueInput,
    @common.Body() body: CreditReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditReports: {
        connect: body,
      },
    };
    await this.service.updateCreditBureau({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creditReports")
  async updateCreditReports(
    @common.Param() params: CreditBureauWhereUniqueInput,
    @common.Body() body: CreditReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditReports: {
        set: body,
      },
    };
    await this.service.updateCreditBureau({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creditReports")
  async disconnectCreditReports(
    @common.Param() params: CreditBureauWhereUniqueInput,
    @common.Body() body: CreditReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditReports: {
        disconnect: body,
      },
    };
    await this.service.updateCreditBureau({
      where: params,
      data,
      select: { id: true },
    });
  }
}
