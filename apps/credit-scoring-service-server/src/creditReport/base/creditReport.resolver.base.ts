/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditReport } from "./CreditReport";
import { CreditReportCountArgs } from "./CreditReportCountArgs";
import { CreditReportFindManyArgs } from "./CreditReportFindManyArgs";
import { CreditReportFindUniqueArgs } from "./CreditReportFindUniqueArgs";
import { CreateCreditReportArgs } from "./CreateCreditReportArgs";
import { UpdateCreditReportArgs } from "./UpdateCreditReportArgs";
import { DeleteCreditReportArgs } from "./DeleteCreditReportArgs";
import { Borrower } from "../../borrower/base/Borrower";
import { CreditBureau } from "../../creditBureau/base/CreditBureau";
import { CreditReportService } from "../creditReport.service";
@graphql.Resolver(() => CreditReport)
export class CreditReportResolverBase {
  constructor(protected readonly service: CreditReportService) {}

  async _creditReportsMeta(
    @graphql.Args() args: CreditReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditReport])
  async creditReports(
    @graphql.Args() args: CreditReportFindManyArgs
  ): Promise<CreditReport[]> {
    return this.service.creditReports(args);
  }

  @graphql.Query(() => CreditReport, { nullable: true })
  async creditReport(
    @graphql.Args() args: CreditReportFindUniqueArgs
  ): Promise<CreditReport | null> {
    const result = await this.service.creditReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditReport)
  async createCreditReport(
    @graphql.Args() args: CreateCreditReportArgs
  ): Promise<CreditReport> {
    return await this.service.createCreditReport({
      ...args,
      data: {
        ...args.data,

        borrower: args.data.borrower
          ? {
              connect: args.data.borrower,
            }
          : undefined,

        creditBureau: args.data.creditBureau
          ? {
              connect: args.data.creditBureau,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CreditReport)
  async updateCreditReport(
    @graphql.Args() args: UpdateCreditReportArgs
  ): Promise<CreditReport | null> {
    try {
      return await this.service.updateCreditReport({
        ...args,
        data: {
          ...args.data,

          borrower: args.data.borrower
            ? {
                connect: args.data.borrower,
              }
            : undefined,

          creditBureau: args.data.creditBureau
            ? {
                connect: args.data.creditBureau,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditReport)
  async deleteCreditReport(
    @graphql.Args() args: DeleteCreditReportArgs
  ): Promise<CreditReport | null> {
    try {
      return await this.service.deleteCreditReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Borrower, {
    nullable: true,
    name: "borrower",
  })
  async getBorrower(
    @graphql.Parent() parent: CreditReport
  ): Promise<Borrower | null> {
    const result = await this.service.getBorrower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => CreditBureau, {
    nullable: true,
    name: "creditBureau",
  })
  async getCreditBureau(
    @graphql.Parent() parent: CreditReport
  ): Promise<CreditBureau | null> {
    const result = await this.service.getCreditBureau(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
