/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CreditReport as PrismaCreditReport,
  Borrower as PrismaBorrower,
  CreditBureau as PrismaCreditBureau,
} from "@prisma/client";

export class CreditReportServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreditReportCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creditReport.count(args);
  }

  async creditReports<T extends Prisma.CreditReportFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditReportFindManyArgs>
  ): Promise<PrismaCreditReport[]> {
    return this.prisma.creditReport.findMany<Prisma.CreditReportFindManyArgs>(
      args
    );
  }
  async creditReport<T extends Prisma.CreditReportFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditReportFindUniqueArgs>
  ): Promise<PrismaCreditReport | null> {
    return this.prisma.creditReport.findUnique(args);
  }
  async createCreditReport<T extends Prisma.CreditReportCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditReportCreateArgs>
  ): Promise<PrismaCreditReport> {
    return this.prisma.creditReport.create<T>(args);
  }
  async updateCreditReport<T extends Prisma.CreditReportUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditReportUpdateArgs>
  ): Promise<PrismaCreditReport> {
    return this.prisma.creditReport.update<T>(args);
  }
  async deleteCreditReport<T extends Prisma.CreditReportDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditReportDeleteArgs>
  ): Promise<PrismaCreditReport> {
    return this.prisma.creditReport.delete(args);
  }

  async getBorrower(parentId: string): Promise<PrismaBorrower | null> {
    return this.prisma.creditReport
      .findUnique({
        where: { id: parentId },
      })
      .borrower();
  }

  async getCreditBureau(parentId: string): Promise<PrismaCreditBureau | null> {
    return this.prisma.creditReport
      .findUnique({
        where: { id: parentId },
      })
      .creditBureau();
  }
}
