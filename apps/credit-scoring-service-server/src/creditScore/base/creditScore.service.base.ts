/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CreditScore as PrismaCreditScore,
  Borrower as PrismaBorrower,
} from "@prisma/client";

export class CreditScoreServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CreditScoreCountArgs, "select">
  ): Promise<number> {
    return this.prisma.creditScore.count(args);
  }

  async creditScores<T extends Prisma.CreditScoreFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditScoreFindManyArgs>
  ): Promise<PrismaCreditScore[]> {
    return this.prisma.creditScore.findMany<Prisma.CreditScoreFindManyArgs>(
      args
    );
  }
  async creditScore<T extends Prisma.CreditScoreFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditScoreFindUniqueArgs>
  ): Promise<PrismaCreditScore | null> {
    return this.prisma.creditScore.findUnique(args);
  }
  async createCreditScore<T extends Prisma.CreditScoreCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditScoreCreateArgs>
  ): Promise<PrismaCreditScore> {
    return this.prisma.creditScore.create<T>(args);
  }
  async updateCreditScore<T extends Prisma.CreditScoreUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditScoreUpdateArgs>
  ): Promise<PrismaCreditScore> {
    return this.prisma.creditScore.update<T>(args);
  }
  async deleteCreditScore<T extends Prisma.CreditScoreDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CreditScoreDeleteArgs>
  ): Promise<PrismaCreditScore> {
    return this.prisma.creditScore.delete(args);
  }

  async getBorrower(parentId: string): Promise<PrismaBorrower | null> {
    return this.prisma.creditScore
      .findUnique({
        where: { id: parentId },
      })
      .borrower();
  }
}
