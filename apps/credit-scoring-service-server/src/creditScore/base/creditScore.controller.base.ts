/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CreditScoreService } from "../creditScore.service";
import { CreditScoreCreateInput } from "./CreditScoreCreateInput";
import { CreditScore } from "./CreditScore";
import { CreditScoreFindManyArgs } from "./CreditScoreFindManyArgs";
import { CreditScoreWhereUniqueInput } from "./CreditScoreWhereUniqueInput";
import { CreditScoreUpdateInput } from "./CreditScoreUpdateInput";

export class CreditScoreControllerBase {
  constructor(protected readonly service: CreditScoreService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CreditScore })
  async createCreditScore(
    @common.Body() data: CreditScoreCreateInput
  ): Promise<CreditScore> {
    return await this.service.createCreditScore({
      data: {
        ...data,

        borrower: data.borrower
          ? {
              connect: data.borrower,
            }
          : undefined,
      },
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generatedAt: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CreditScore] })
  @ApiNestedQuery(CreditScoreFindManyArgs)
  async creditScores(@common.Req() request: Request): Promise<CreditScore[]> {
    const args = plainToClass(CreditScoreFindManyArgs, request.query);
    return this.service.creditScores({
      ...args,
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generatedAt: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CreditScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async creditScore(
    @common.Param() params: CreditScoreWhereUniqueInput
  ): Promise<CreditScore | null> {
    const result = await this.service.creditScore({
      where: params,
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generatedAt: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CreditScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCreditScore(
    @common.Param() params: CreditScoreWhereUniqueInput,
    @common.Body() data: CreditScoreUpdateInput
  ): Promise<CreditScore | null> {
    try {
      return await this.service.updateCreditScore({
        where: params,
        data: {
          ...data,

          borrower: data.borrower
            ? {
                connect: data.borrower,
              }
            : undefined,
        },
        select: {
          borrower: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          generatedAt: true,
          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CreditScore })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCreditScore(
    @common.Param() params: CreditScoreWhereUniqueInput
  ): Promise<CreditScore | null> {
    try {
      return await this.service.deleteCreditScore({
        where: params,
        select: {
          borrower: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          generatedAt: true,
          id: true,
          score: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
