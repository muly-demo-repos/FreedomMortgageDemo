/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreditScore } from "./CreditScore";
import { CreditScoreCountArgs } from "./CreditScoreCountArgs";
import { CreditScoreFindManyArgs } from "./CreditScoreFindManyArgs";
import { CreditScoreFindUniqueArgs } from "./CreditScoreFindUniqueArgs";
import { CreateCreditScoreArgs } from "./CreateCreditScoreArgs";
import { UpdateCreditScoreArgs } from "./UpdateCreditScoreArgs";
import { DeleteCreditScoreArgs } from "./DeleteCreditScoreArgs";
import { Borrower } from "../../borrower/base/Borrower";
import { CreditScoreService } from "../creditScore.service";
@graphql.Resolver(() => CreditScore)
export class CreditScoreResolverBase {
  constructor(protected readonly service: CreditScoreService) {}

  async _creditScoresMeta(
    @graphql.Args() args: CreditScoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CreditScore])
  async creditScores(
    @graphql.Args() args: CreditScoreFindManyArgs
  ): Promise<CreditScore[]> {
    return this.service.creditScores(args);
  }

  @graphql.Query(() => CreditScore, { nullable: true })
  async creditScore(
    @graphql.Args() args: CreditScoreFindUniqueArgs
  ): Promise<CreditScore | null> {
    const result = await this.service.creditScore(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CreditScore)
  async createCreditScore(
    @graphql.Args() args: CreateCreditScoreArgs
  ): Promise<CreditScore> {
    return await this.service.createCreditScore({
      ...args,
      data: {
        ...args.data,

        borrower: args.data.borrower
          ? {
              connect: args.data.borrower,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CreditScore)
  async updateCreditScore(
    @graphql.Args() args: UpdateCreditScoreArgs
  ): Promise<CreditScore | null> {
    try {
      return await this.service.updateCreditScore({
        ...args,
        data: {
          ...args.data,

          borrower: args.data.borrower
            ? {
                connect: args.data.borrower,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CreditScore)
  async deleteCreditScore(
    @graphql.Args() args: DeleteCreditScoreArgs
  ): Promise<CreditScore | null> {
    try {
      return await this.service.deleteCreditScore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Borrower, {
    nullable: true,
    name: "borrower",
  })
  async getBorrower(
    @graphql.Parent() parent: CreditScore
  ): Promise<Borrower | null> {
    const result = await this.service.getBorrower(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
