/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Borrower } from "./Borrower";
import { BorrowerCountArgs } from "./BorrowerCountArgs";
import { BorrowerFindManyArgs } from "./BorrowerFindManyArgs";
import { BorrowerFindUniqueArgs } from "./BorrowerFindUniqueArgs";
import { CreateBorrowerArgs } from "./CreateBorrowerArgs";
import { UpdateBorrowerArgs } from "./UpdateBorrowerArgs";
import { DeleteBorrowerArgs } from "./DeleteBorrowerArgs";
import { CreditReportFindManyArgs } from "../../creditReport/base/CreditReportFindManyArgs";
import { CreditReport } from "../../creditReport/base/CreditReport";
import { CreditScoreFindManyArgs } from "../../creditScore/base/CreditScoreFindManyArgs";
import { CreditScore } from "../../creditScore/base/CreditScore";
import { BorrowerService } from "../borrower.service";
@graphql.Resolver(() => Borrower)
export class BorrowerResolverBase {
  constructor(protected readonly service: BorrowerService) {}

  async _borrowersMeta(
    @graphql.Args() args: BorrowerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Borrower])
  async borrowers(
    @graphql.Args() args: BorrowerFindManyArgs
  ): Promise<Borrower[]> {
    return this.service.borrowers(args);
  }

  @graphql.Query(() => Borrower, { nullable: true })
  async borrower(
    @graphql.Args() args: BorrowerFindUniqueArgs
  ): Promise<Borrower | null> {
    const result = await this.service.borrower(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Borrower)
  async createBorrower(
    @graphql.Args() args: CreateBorrowerArgs
  ): Promise<Borrower> {
    return await this.service.createBorrower({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Borrower)
  async updateBorrower(
    @graphql.Args() args: UpdateBorrowerArgs
  ): Promise<Borrower | null> {
    try {
      return await this.service.updateBorrower({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Borrower)
  async deleteBorrower(
    @graphql.Args() args: DeleteBorrowerArgs
  ): Promise<Borrower | null> {
    try {
      return await this.service.deleteBorrower(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CreditReport], { name: "creditReports" })
  async findCreditReports(
    @graphql.Parent() parent: Borrower,
    @graphql.Args() args: CreditReportFindManyArgs
  ): Promise<CreditReport[]> {
    const results = await this.service.findCreditReports(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CreditScore], { name: "creditScores" })
  async findCreditScores(
    @graphql.Parent() parent: Borrower,
    @graphql.Args() args: CreditScoreFindManyArgs
  ): Promise<CreditScore[]> {
    const results = await this.service.findCreditScores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
