/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BorrowerService } from "../borrower.service";
import { BorrowerCreateInput } from "./BorrowerCreateInput";
import { Borrower } from "./Borrower";
import { BorrowerFindManyArgs } from "./BorrowerFindManyArgs";
import { BorrowerWhereUniqueInput } from "./BorrowerWhereUniqueInput";
import { BorrowerUpdateInput } from "./BorrowerUpdateInput";
import { CreditScoreFindManyArgs } from "../../creditScore/base/CreditScoreFindManyArgs";
import { CreditScore } from "../../creditScore/base/CreditScore";
import { CreditScoreWhereUniqueInput } from "../../creditScore/base/CreditScoreWhereUniqueInput";
import { FinancialRecordFindManyArgs } from "../../financialRecord/base/FinancialRecordFindManyArgs";
import { FinancialRecord } from "../../financialRecord/base/FinancialRecord";
import { FinancialRecordWhereUniqueInput } from "../../financialRecord/base/FinancialRecordWhereUniqueInput";
import { ScoreReportFindManyArgs } from "../../scoreReport/base/ScoreReportFindManyArgs";
import { ScoreReport } from "../../scoreReport/base/ScoreReport";
import { ScoreReportWhereUniqueInput } from "../../scoreReport/base/ScoreReportWhereUniqueInput";

export class BorrowerControllerBase {
  constructor(protected readonly service: BorrowerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Borrower })
  async createBorrower(
    @common.Body() data: BorrowerCreateInput
  ): Promise<Borrower> {
    return await this.service.createBorrower({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Borrower] })
  @ApiNestedQuery(BorrowerFindManyArgs)
  async borrowers(@common.Req() request: Request): Promise<Borrower[]> {
    const args = plainToClass(BorrowerFindManyArgs, request.query);
    return this.service.borrowers({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Borrower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async borrower(
    @common.Param() params: BorrowerWhereUniqueInput
  ): Promise<Borrower | null> {
    const result = await this.service.borrower({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Borrower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBorrower(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() data: BorrowerUpdateInput
  ): Promise<Borrower | null> {
    try {
      return await this.service.updateBorrower({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Borrower })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBorrower(
    @common.Param() params: BorrowerWhereUniqueInput
  ): Promise<Borrower | null> {
    try {
      return await this.service.deleteBorrower({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          phoneNumber: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/creditScores")
  @ApiNestedQuery(CreditScoreFindManyArgs)
  async findCreditScores(
    @common.Req() request: Request,
    @common.Param() params: BorrowerWhereUniqueInput
  ): Promise<CreditScore[]> {
    const query = plainToClass(CreditScoreFindManyArgs, request.query);
    const results = await this.service.findCreditScores(params.id, {
      ...query,
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generatedAt: true,
        id: true,
        score: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/creditScores")
  async connectCreditScores(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: CreditScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditScores: {
        connect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/creditScores")
  async updateCreditScores(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: CreditScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditScores: {
        set: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/creditScores")
  async disconnectCreditScores(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: CreditScoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      creditScores: {
        disconnect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/financialRecords")
  @ApiNestedQuery(FinancialRecordFindManyArgs)
  async findFinancialRecords(
    @common.Req() request: Request,
    @common.Param() params: BorrowerWhereUniqueInput
  ): Promise<FinancialRecord[]> {
    const query = plainToClass(FinancialRecordFindManyArgs, request.query);
    const results = await this.service.findFinancialRecords(params.id, {
      ...query,
      select: {
        bankStatements: true,

        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        loanHistories: true,
        transactionRecords: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/financialRecords")
  async connectFinancialRecords(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: FinancialRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financialRecords: {
        connect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/financialRecords")
  async updateFinancialRecords(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: FinancialRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financialRecords: {
        set: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/financialRecords")
  async disconnectFinancialRecords(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: FinancialRecordWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      financialRecords: {
        disconnect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/scoreReports")
  @ApiNestedQuery(ScoreReportFindManyArgs)
  async findScoreReports(
    @common.Req() request: Request,
    @common.Param() params: BorrowerWhereUniqueInput
  ): Promise<ScoreReport[]> {
    const query = plainToClass(ScoreReportFindManyArgs, request.query);
    const results = await this.service.findScoreReports(params.id, {
      ...query,
      select: {
        borrower: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        generatedAt: true,
        id: true,
        reportData: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scoreReports")
  async connectScoreReports(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: ScoreReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scoreReports: {
        connect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scoreReports")
  async updateScoreReports(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: ScoreReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scoreReports: {
        set: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scoreReports")
  async disconnectScoreReports(
    @common.Param() params: BorrowerWhereUniqueInput,
    @common.Body() body: ScoreReportWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scoreReports: {
        disconnect: body,
      },
    };
    await this.service.updateBorrower({
      where: params,
      data,
      select: { id: true },
    });
  }
}
